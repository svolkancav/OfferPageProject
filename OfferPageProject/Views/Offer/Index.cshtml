@using X.PagedList
@model IPagedList<OfferPageProject.Common.VM.OfferVM>

@{
	ViewData["Title"] = "Index";
}



<body id="page-top">


	<!-- Begin Page Content -->
	<div class="container-fluid">

		<!-- Page Heading -->
		<h1 class="h3 mb-2 text-gray-800">Offer List</h1>

		<!-- DataTales Example -->
		<div class="card shadow mb-4">
			<div class="card-body">
				<div class="table-responsive">
					<div id="dataTable_wrapper" class="dataTables_wrapper dt-bootstrap4">
						<div class="row">
							<div class="col-sm-12 col-md-9">
								<div class="dataTables_length" id="dataTable_length">
									<p>
										<a asp-action="Create">Create Offer</a>
									</p>
									<label>
										Show
										<select name="dataTable_length" aria-controls="dataTable" class="custom-select custom-select-sm form-control form-control-sm" asp-for="@Model.PageSize" id="pageSizeDropdown">
											<option value="10">10</option>
											<option value="25">25</option>
											<option value="50">50</option>
											<option value="100">100</option>
										</select>
									</label>
								</div>
							</div>
							<div class="col-sm-12 col-md-3">
								<div id="dataTable_filter" class="dataTables_filter">
									<label>
										@using (Html.BeginForm())
										{
											<p>
												@Html.TextBox("searchText")
												<input type="submit" placeholder="Enter value" value="Search" />
											</p>
										}

									</label>
								</div>
							</div>
						</div>

					</div>
					<table class="table table-bordered" id="dataTable" width="100%" cellspacing="0" role="grid" aria-describedby="dataTable_info" style="width: 100%;">
						<thead>
							<tr>
								<th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" onclick="sortColumn('Mode')" aria-sort="ascending" style="width: 140px;">
									Mode
								</th>
								<th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" onclick="sortColumn('MovementTypeName')" aria-sort="ascending" style="width: 140px;">
									Movement Type
								</th>
								<th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" onclick="sortColumn('IncoTermsName')" aria-sort="ascending" style="width: 140px;">
									IncoTerms
								</th>
								<th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" onclick="sortColumn('CountryName')" aria-sort="ascending" style="width: 140px;">
									Country
								</th>
								<th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1"  aria-sort="ascending" style="width: 140px;">
									Unit-1
								</th>
								<th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-sort="ascending" style="width: 140px;">
									Unit-2
								</th>
								<th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1"
									aria-label="Currency.GetDisplayName(Model.Currency)" onclick="sortColumn('CurrencyCode')" aria-sort="ascending"
									style="width: 140px;">
									Currency
								</th>
								<th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1"
									aria-label="PackageType.GetDisplayName(Model.PackageType)" onclick="sortColumn('PackageType')" aria-sort="ascending"
									style="width: 140px;">
									Package Type
								</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var item in Model)
							{
								<tr>
									<td>@item.ModeName</td>
									<td>@item.MovementTypeName</td>
									<td>@item.IncoTermsName</td>
									<td>@item.CountryName</td>
									<td>@item.Unit1Quantity@item.Unit1Type</td>
									<td>@item.Unit1Quantity@item.Unit2Type</td>
									<td>@item.Currency</td>
									<td>@item.PackageType</td>
								</tr>
							}
						</tbody>

					</table>



					<div class="row">
						<div class="col-md-6 align-self-center">
							<p id="dataTable_info" class="dataTables_info" role="status" aria-live="polite">Page Number @(Model.PageNumber) / @Model.PageCount , Offer Number @Model.TotalItemCount Qty </p>
						</div>
						<div class="col-md-6">
							<nav class="d-lg-flex justify-content-lg-end dataTables_paginate paging_simple_numbers">
								<ul class="pagination">
									<li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
										<a class="page-link" aria-label="Previous" href="@(Model.HasPreviousPage ? Url.Action("Index", new { pageNumber = Model.PageNumber - 1 , pageSize=Model.PageSize, searchText=Context.Request.Query["searchText"] }) : "#")">
											<span aria-hidden="true">Previous</span>
										</a>
									</li>
									@for (int i = 1; i <= Model.PageCount; i++)
									{
										<li class="page-item @(i == Model.PageNumber ? "active" : "")">
											<a class="page-link" href="@Url.Action("Index", new { pageNumber = i, pageSize=Model.PageSize,searchText=Context.Request.Query["searchText"] })">@i</a>
										</li>
									}
									<li class="page-item @(Model.HasNextPage ? "" : "disabled")">
										<a class="page-link" aria-label="Next" href="@(Model.HasNextPage ? Url.Action("Index", new { pageNumber = Model.PageNumber + 1, pageSize=Model.PageSize,searchText=Context.Request.Query["searchText"] }) : "#")">
											<span aria-hidden="true">Next</span>
										</a>
									</li>
								</ul>
							</nav>
						</div>
					</div>


				</div>
			</div>
		</div>
	</div>
	</div>
	<!-- /.container-fluid -->
	<!-- End of Main Content -->
	<!-- Footer -->
	<!-- End of Footer -->
	<!-- End of Content Wrapper -->
	<!-- End of Page Wrapper -->
	<!-- Scroll to Top Button-->
	<a class="scroll-to-top rounded" href="#page-top">
		<i class="fas fa-angle-up"></i>
	</a>


	@section Scripts {
		@if (TempData.ContainsKey("Toastrsuccess"))
		{
			<script>
				console.log('Toastr success:', '@TempData["Toastrsuccess"]');
				toastr.success('@TempData["Toastrsuccess"]');
			</script>
		}

		@if (TempData.ContainsKey("Toastrerror"))
		{
			<script>
				toastr.error('@TempData["Toastrerror"]');
			</script>
		}
	}


	<!-- Bootstrap core JavaScript-->
	<script src="vendor/jquery/jquery.min.js"></script>
	<script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

	<!-- Core plugin JavaScript-->
	<script src="vendor/jquery-easing/jquery.easing.min.js"></script>

	<!-- Custom scripts for all pages-->
	<script src="js/sb-admin-2.min.js"></script>

	<!-- Page level plugins -->
	<script src="vendor/datatables/jquery.dataTables.min.js"></script>
	<script src="vendor/datatables/dataTables.bootstrap4.min.js"></script>

	<!-- Page level custom scripts -->
	<script src="js/demo/datatables-demo.js"></script>

	<script>
		var dropdown = document.getElementById("pageSizeDropdown");

		dropdown.addEventListener("change", function () {
			var selectedPageSize = this.value;
			var searchText = '@Context.Request.Query["searchText"]';

			if (searchText) {
				var url = "/Offer/Index?pageSize=" + selectedPageSize + "&searchText=" + searchText;
			} else {
				var url = "/Offer/Index?pageSize=" + selectedPageSize;
			}

			window.location.href = url;
		});


	</script>

</body>

<script>
	var dropdown1 = document.getElementById("deleteprocess");

	dropdown1.addEventListener("change", function () {
		var selectedPageSize = this.value;


		var url = "/offer/Index?pageSize=" + selectedPageSize;


		window.location.href = url;
	});

	function confirmDelete(id) {
		console.log(id);
		if (confirm("Are you sure you want to delete?")) {
			window.location.href = "/offer/Delete/?id=" + id;
		} else {

		}
	}
</script>

<script>
	function sortColumn(columnName) {
		var currentUrl = window.location.href;

		// Get the current sort order from the URL
		var sortOrder = "asc";
		if (currentUrl.includes("sortOrder=asc")) {
			sortOrder = "desc";
		}

		// Update the URL with the selected column and sort order
		var newUrl = updateQueryStringParameter(currentUrl, "sortColumn", columnName);
		newUrl = updateQueryStringParameter(newUrl, "sortOrder", sortOrder);

		window.location.href = newUrl;
	}

	function updateQueryStringParameter(uri, key, value) {
		var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
		var separator = uri.indexOf('?') !== -1 ? "&" : "?";
		if (uri.match(re)) {
			return uri.replace(re, '$1' + key + "=" + value + '$2');
		} else {
			return uri + separator + key + "=" + value;
		}
	}
</script>